// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotivationalQuotes.Context;

#nullable disable

namespace MotivationalQuotes.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240821191826_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MotivationalQuotes.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("QuoteId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MotivationalQuotes.Models.Quote", b =>
                {
                    b.Property<int>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("QuoteId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PostedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("QuoteId");

                    b.HasIndex("PostedByUserId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("MotivationalQuotes.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("FavoriteQuoteId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId");

                    b.HasIndex("FavoriteQuoteId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuoteUser", b =>
                {
                    b.Property<int>("LikedQuotesQuoteId")
                        .HasColumnType("int");

                    b.Property<int>("LikesUserId")
                        .HasColumnType("int");

                    b.HasKey("LikedQuotesQuoteId", "LikesUserId");

                    b.HasIndex("LikesUserId");

                    b.ToTable("UserLikedQuotes", (string)null);
                });

            modelBuilder.Entity("QuoteUser1", b =>
                {
                    b.Property<int>("SharedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("SharedQuotesQuoteId")
                        .HasColumnType("int");

                    b.HasKey("SharedByUserId", "SharedQuotesQuoteId");

                    b.HasIndex("SharedQuotesQuoteId");

                    b.ToTable("UserSharedQuotes", (string)null);
                });

            modelBuilder.Entity("MotivationalQuotes.Models.Comment", b =>
                {
                    b.HasOne("MotivationalQuotes.Models.Quote", "Quote")
                        .WithMany("Comments")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotivationalQuotes.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quote");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MotivationalQuotes.Models.Quote", b =>
                {
                    b.HasOne("MotivationalQuotes.Models.User", "PostedByUser")
                        .WithMany()
                        .HasForeignKey("PostedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PostedByUser");
                });

            modelBuilder.Entity("MotivationalQuotes.Models.User", b =>
                {
                    b.HasOne("MotivationalQuotes.Models.Quote", "FavoriteQuote")
                        .WithMany()
                        .HasForeignKey("FavoriteQuoteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FavoriteQuote");
                });

            modelBuilder.Entity("QuoteUser", b =>
                {
                    b.HasOne("MotivationalQuotes.Models.Quote", null)
                        .WithMany()
                        .HasForeignKey("LikedQuotesQuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotivationalQuotes.Models.User", null)
                        .WithMany()
                        .HasForeignKey("LikesUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuoteUser1", b =>
                {
                    b.HasOne("MotivationalQuotes.Models.User", null)
                        .WithMany()
                        .HasForeignKey("SharedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotivationalQuotes.Models.Quote", null)
                        .WithMany()
                        .HasForeignKey("SharedQuotesQuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MotivationalQuotes.Models.Quote", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
